# Config for the setup workflow and common resources (jobs, commands) for main workflows
# `common-` prefix is added for common resources (to avoid conflicts with module resources)

version: 2.1

setup: << pipeline.parameters.run-setup >>

# All pipeline parameters need to be defined equally both for the setup workflow and main workflows
# These parameters will be passed to both of them
parameters:
  run-setup:
    description: Whether it is a setup workflow or a continuation
    type: boolean
    default: true
  force-all:
    description: Emergency valve - forcibly build all the modules
    type: boolean
    default: false
  custom-parameter:
    description: Some string to pass
    type: string
    default: ''

# Custom commands aimed for the main workflows and jobs
commands:
  common-say-hello:
    parameters:
      to:
        description: To whom you say hello
        type: string
        default: you anonymous
    steps:
      - run: echo 'Greetings to << parameters.to >> from the shared command!'
      - run: echo 'The value of `custom-parameter` was "<< pipeline.parameters.custom-parameter >>"'

# Common jobs for the main workflows
jobs:
  common-pre:
    docker:
      - image: alpine
    steps:
      - common-say-hello
      - run: echo 'Jobs with `common-` prefix are intended to be shared among modules'

workflows:
  # The setup workflow
  setup-workflow:
    when: << pipeline.parameters.run-setup >>
    jobs:
      - config-splitting/setup-dynamic-config:
          force-all: << pipeline.parameters.force-all >>
          base-revision: main
          # If A is modified, the job for A will run
          # Similarly if B is modified, the job for B will run
          # If C is modified, then the jobs for both C and B (as a dependency) will run
          modules: |
            apps/module-a
            apps/module-b
            apps/module-c

orbs:
  # An "embedded" orb to facilitate config splitting
  config-splitting:
    # Dependencies
    orbs:
      continuation: circleci/continuation@0.1.2
    # Commands for the setup workflow
    commands:
      list-changed-modules:
        parameters:
          modules:
            description: |
              Directories which should be built upon changes.
              Each row represents a space-separated list of the root directories for modules, each of which must has own `.circleci/config.yml`.
              The first item of the list will be tested for changes, and will be added to the filtered list of modules if there are any changes.
              The subsequent items, if there are any, will also be added to the filtered list of modules if there are any changes in the directory specified as the first item.

              CAVEAT: Directory names having white spaces cannot be specified.
            type: string
          modules-filtered:
            description: Path to the file where the filtered list of modules is generated
            type: string
            default: /tmp/modules-filtered.txt
          base-revision:
            description: Revision to compare with the current HEAD
            type: string
            default: main
          force-all:
            description: Emergency valve - forcibly build all the modules
            type: boolean
            default: false
        steps:
          - run:
              name: Generate the list of modules having changes
              command: |
                modules_filtered=<< parameters.modules-filtered >>

                modules=echo "$(cat <<EOD | sed -e '/^$/d' | while read row; do module="$(echo "$row" | awk '{ print $1 }')"; then echo "$row" | sed -e 's/ /\n/g'; done
                << parameters.modules >>
                EOF
                )"
                echo $modules

                # Remove the square brackets and quotes from the input string
                cleaned_input=$(echo "$input" | tr -d '[]"' | tr ',' '\n')
                echo 'Cleared list of apps that changed' $cleaned_input
                echo ''

                # If app changed list is empty then exit.
                if [ -z "$cleaned_input" ]
                then
                  echo 'No package changed, exiting.'
                  circleci-agent step halt
                  exit
                fi

                # Create the output file and write the filtered and cleaned input to it
                echo "$cleaned_input" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//' | grep -v '//' | sed 's/^/apps\//' > "$modules_filtered"

                echo 'Output has been written to' $modules_filtered  ' with the following content:'

                cat $modules_filtered

      merge-modular-configs:
        parameters:
          modules:
            description: Path to the file for the list of the modules to build
            type: string
            default: /tmp/modules-filtered.txt
          shared-config:
            description: Path to the config providing shared resources (such as prerequisite jobs and common commands)
            type: string
            default: .circleci/config.yml
          continue-config:
            description: Path to the internally-used config for continuation
            type: string
            default: .circleci/continue-config.yml
        steps:
          - run:
              name: Merge configs
              command: |
                modules=<< parameters.modules >>
                shared_config=<< parameters.shared-config >>
                continue_config=<< parameters.continue-config >>

                # If `modules` is unavailable, stop this job without continuation
                if [ ! -f $modules ] || [ ! -s $modules ]
                then
                  echo 'Nothing to merge. Halting the job.'
                  circleci-agent step halt
                  exit
                fi

                # Convert a list of dirs to a list of config.yml
                sed -i -e 's/$/\/.circleci\/config.yml/g' "$modules"


                # If `shared-config` exists, append it at the end of `modules`
                if [ -f $shared_config ]
                then
                  echo 'appending shared config.'
                  echo "$shared_config" >> "$modules"
                fi

                echo 'will merge the following config files:'
                cat $modules
                echo ''

                # yq syntax changed after v4.18.
                # yq v4.13.3 (current yq version at cimg/node:17.1.0) docs can be found at https://github.com/mikefarah/yq/tree/e052ff8025dae7fb040720e7901d40e8b7d5655f/pkg/yqlib/doc
                xargs -a "$modules" yq eval-all '. as $item ireduce ({}; . * $item )' | tee "$continue_config"

    jobs:
      # The job for the setup workflow
      setup-dynamic-config:
        parameters:
          modules:
            description: Directories which should be tested for changes; one directory per line. Each directory must have `.circleci/config.yml`.
            type: string
          base-revision:
            description: Revision to compare with the current HEAD
            type: string
            default: main
          force-all:
            description: Emergency valve - forcibly build all the modules
            type: boolean
            default: false
          modules-filtered:
            description: Path to the file where the filtered list of modules is generated
            type: string
            default: /tmp/modules-filtered.txt
          shared-config:
            description: Path to the config providing shared resources (such as prerequisite jobs and common commands)
            type: string
            default: .circleci/config.yml
          continue-config:
            description: Path to the internally-used config for continuation
            type: string
            default: .circleci/continue-config.yml
        docker:
          - image: cimg/node:17.1.0
        steps:
          - checkout
          - list-changed-modules:
              modules: << parameters.modules >>
              modules-filtered: << parameters.modules-filtered >>
              base-revision: << parameters.base-revision >>
              force-all: << parameters.force-all >>
          - merge-modular-configs:
              modules: << parameters.modules-filtered >>
              shared-config: << parameters.shared-config >>
              continue-config: << parameters.continue-config >>
          - continuation/continue:
              configuration_path: << parameters.continue-config >>
              parameters: '{"run-setup":false}'
